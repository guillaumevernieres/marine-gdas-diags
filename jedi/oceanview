#!/usr/bin/env python

from __future__ import print_function
import matplotlib as mpl
mpl.use('WXAgg')
mpl.interactive(False)
import pylab as pl
from pylab import get_current_fig_manager as gcfm
import wx
import numpy as np
from mpl_toolkits.basemap import Basemap
from netCDF4 import Dataset, MFDataset, chartostring
import matplotlib.pyplot as plt
import sys
import matplotlib.cm as cm
from tqdm import tqdm
from scipy import stats
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import re


COLORS=['b','r','g','m','k','y']

class Instrument:
    """
    Represents a simple data structure for an instrument

    Attributes:
        name (str): The name of the instrument.
        instid (int): The instrument ID.
        varid (int): The variable ID.
        zmin (float): The minimum depth.
        zmax (float): The maximum depth.
        color (str, optional): The color of the instrument. Defaults to 'k' (black).
        proj (list, optional): The projection(s) for the instrument. Defaults to ['global'].
    """

    def __init__(self, name, instid, varid, zmin, zmax, color='k', proj=['global']):
        self.name = name
        self.instid = instid      # Instrument ID
        self.varid = varid        # Var ID
        self.zmin = zmin
        self.zmax = zmax
        self.color = color
        self.proj = proj

class VarSpecs:
    def __init__(self, varid, bounds, fignum, units):
        self.varid  = varid
        self.bounds = bounds
        self.fignum = fignum
        self.units  = units


dict_inst = { 'insitu_profile_argo'   :
              Instrument(name='Argo', instid=508, varid=np.array([101, 102]), zmin=0, zmax=2000),
              'insitu_profile_bathy'   :
              Instrument(name='bathy', instid=509, varid=np.array([101, 102]), zmin=0, zmax=2000),
              'insitu_profile_tesac'   :
              Instrument(name='tesac', instid=510, varid=np.array([101, 102]), zmin=0, zmax=2000),
              'insitu_profile_tesac_salinity'   :
              Instrument(name='tesac salt', instid=511, varid=np.array([102]), zmin=0, zmax=2000),
              'insitu_surface_trkob'   :
              Instrument(name='trkob', instid=512, varid=np.array([102]), zmin=0, zmax=2000),
              'insitu_surface_trkob_salinity'   :
              Instrument(name='trkob salt', instid=513, varid=np.array([102]), zmin=0, zmax=2000),
             }

class ioda:
    """
    A class representing the ioda object.

    Attributes:
        lon (list): List of longitudes.
        lat (list): List of latitudes.
        oma (list): List of observation minus analysis values.
        omf (list): List of observation minus first guess values.
        hofx (list): List of simulated observations.
        obs (list): List of observations.
        obserror (list): List of observation errors.
        preqc (list): List of pre-quality control values.
        postqc (list): List of post-quality control values.
        lev (list): List of levels/depths.
        seqnum (list): List of sequence numbers.
        instid (list): List of instrument IDs.
        col (list): List of colors.
        time (list): List of times.
        varname (str): Name of the variable.

    Methods:
        __init__(self, iodafnames, varname='waterTemperature'): Initializes the ioda object.
    """

    def __init__(self, iodafnames, varname='waterTemperature'):
        """
        Initializes the ioda object.

        Parameters:
            iodafnames (list): List of iodafname files.
            varname (str, optional): Name of the variable. Defaults to 'waterTemperature'.

        Returns:
            None
        """
        flist=iodafnames
        self.lon=[]
        self.lat=[]
        self.oma=[]
        self.omf=[]
        self.hofx=[]
        self.obs=[]
        self.obserror=[]
        self.preqc=[]
        self.postqc=[]
        self.lev=[]
        self.seqnum=[]
        self.instid=[]
        #self.col=[]
        self.time=[]
        self.varname=varname

        # Plot profile
        self.unit = ''
        if varname=='waterTemperature':
           self.unit = '[^oC]'
        if varname=='salinity':
           self.unit = '[psu]'

        get_from_ioda = lambda ncfile, varname, groupname: ncfile.groups[groupname].variables[varname][:]
        pattern = re.compile(r'\.\d{10}\.nc4$')
        for iodafname in tqdm(flist):
            ncfile = Dataset(iodafname)
            bufr_subset = pattern.sub('', iodafname.split('/')[-1])

            dum=get_from_ioda(ncfile,varname,'ObsValue');
            I=np.where(abs(dum)<9999999.9)
            self.obs = np.append(dum[I],self.obs)

            dum = get_from_ioda(ncfile,varname,'ombg')
            self.omf=np.append(-dum[I],self.omf)

            dum=get_from_ioda(ncfile,varname,'oman');
            self.oma = np.append(-dum[I],self.oma)

            dum=get_from_ioda(ncfile,varname,'EffectiveError0');
            self.obserror = np.append(dum[I],self.obserror)

            dum=get_from_ioda(ncfile,varname,'EffectiveQC0');
            self.postqc = np.append(dum[I],self.postqc)

            dum=get_from_ioda(ncfile,'longitude','MetaData');
            self.lon = np.append(dum[I],self.lon)

            dum=get_from_ioda(ncfile,'latitude','MetaData');
            self.lat = np.append(dum[I],self.lat)

            dum=get_from_ioda(ncfile,'sequenceNumber','MetaData');
            self.seqnum = np.append(dum[I],self.seqnum)

            try:
                dum=get_from_ioda(ncfile,'depth','MetaData');
                self.lev = np.append(-dum[I],self.lev)
            except:
                self.lev = np.append(0*dum[I],self.lev)

            instnum = dict_inst[bufr_subset].instid
            instid=instnum*np.ones(np.shape(dum))
            self.instid = np.append(instid[I], self.instid)
            ncfile.close()

        nobs=len(self.lon)
        self.time = np.zeros(np.shape(self.lon))

class observation_space(object):
    """
    Represents an observation space for oceanview.

    Attributes:
    - iodafname (str): The name of the iodafname file.
    - varname (str): The name of the variable (default is 'waterTemperature').
    - ioda (ioda): An instance of the ioda class.
    - iodafname (str): The name of the iodafname file.
    - fignum (int): The figure number.
    - figure (Figure): The matplotlib figure.
    - axis (Axes): The matplotlib axis.
    - tooltip (ToolTip): The wxPython tooltip.
    - dataX (ndarray): The longitude data.
    - dataY (ndarray): The latitude data.
    - X (ndarray): The transformed longitude data.
    - Y (ndarray): The transformed latitude data.

    Methods:
    - find_inst(INSTID, dict_inst): Finds the instrument name based on the INSTID.
    - plot_prof(dax, fcst, ana, obs, z, var_name, sigo=None): Plots the profile.
    - draw_map(lonl=-180, lonr=180, proj='global'): Draws the map.
    - _onMotion(event): Handles the motion event.
    - _onClick(event): Handles the click event.
    """

    def __init__(self, iodafname, varname='waterTemperature'):
        """
        Initializes an instance of the observation_space class.

        Parameters:
        - iodafname (str): The name of the iodafname file.
        - varname (str): The name of the variable (default is 'waterTemperature').

        Returns:
        None
        """
        self.ioda = ioda(iodafname, varname=varname)
        self.iodafname = iodafname
        self.fignum = 2
        self.figure = pl.figure(num=1, figsize=(18, 10))
        self.axis = self.figure.add_subplot(111)
        self.tooltip = wx.ToolTip(tip='tip with a long %s line and a newline\n' % (' '*100))
        gcfm().canvas.SetToolTip(self.tooltip)
        self.tooltip.Enable(False)
        self.tooltip.SetDelay(0)
        self.figure.canvas.mpl_connect('motion_notify_event', self._onMotion)
        self.figure.canvas.mpl_connect('button_press_event', self._onClick)
        self.dataX = np.squeeze(self.ioda.lon)
        self.dataY = np.squeeze(self.ioda.lat)

        map0 = self.draw_map(lonl=-180, lonr=180)
        x, y = map0(self.dataX, self.dataY)
        self.X = x
        self.Y = y
        cnt = 0
        alpha = 1.0
        for inst in [508, 509, 510, 511, 512, 513]:
            msize = 5.0
            # Plot obs loc
            I = np.where(self.ioda.instid == inst)
            self.axis.plot(x[I], y[I], linestyle='None', marker='.',
                           markersize=msize,
                           label='myplot',
                           color=COLORS[cnt],
                           alpha=alpha)
            cnt += 1

    def find_inst(self, INSTID, dict_inst):
        """
        Finds the instrument name based on the INSTID.

        Parameters:
        - INSTID (int): The instrument ID.
        - dict_inst (dict): The dictionary of instrument information.

        Returns:
        - inst_name (str): The name of the instrument.
        """
        for instrument in dict_inst:
            if INSTID==dict_inst[instrument].instid:
                inst_name=dict_inst[instrument].name
        return inst_name

    def plot_prof(self, dax, fcst, ana, obs, z, var_name, sigo=None):
        """
        Plots the profile.

        Parameters:
        - dax (Axes): The matplotlib axis to plot on.
        - fcst (ndarray): The forecast data.
        - ana (ndarray): The analysis data.
        - obs (ndarray): The observation data.
        - z (ndarray): The depth data.
        - var_name (str): The name of the variable.
        - sigo (ndarray): The observation error data (default is None).

        Returns:
        None
        """
        # Sort the data based on depth
        I = sorted(range(len(z)), key=lambda k: z[k])

        # Plot the forecast data
        dax.plot(fcst[I], z[I], '-',lw=4, color='g', label='Background')

        # Plot the analysis data
        dax.plot(ana[I], z[I], '-',lw=4, color='r', label='Analysis')
        dax.plot(obs[I], z[I], '.',alpha=1.0,markersize=5.0, color='b', label='Observation')
        if sigo is not None:
            sigo_tmp=sigo[I]
            sigo_tmp[abs(sigo_tmp)>999.9]=np.nan
            dax.plot(obs[I]-1.0*sigo_tmp, z[I], '--',linewidth=1.0, color='b')
            dax.plot(obs[I]+1.0*sigo_tmp, z[I], '--',linewidth=1.0, color='b')
        dax.legend()
        dax.set_xlabel(var_name,fontweight='bold')
        dax.grid(True)

    def draw_map(self, lonl=-180, lonr=180, proj='global'):
        """
        Draws the map.

        Parameters:
        - lonl (float): The left longitude boundary (default is -180).
        - lonr (float): The right longitude boundary (default is 180).
        - proj (str): The projection type (default is 'global').

        Returns:
        - map (Basemap): The Basemap object.
        """
        if proj=='global':
            map = Basemap(projection='robin', lon_0=-180, resolution='c')
        if proj=='polarn':
            map = Basemap(projection='npstere', boundinglat=60, lon_0=0, resolution='l')
        if proj=='polars':
            map = Basemap(projection='spstere', boundinglat=-50, lon_0=0, resolution='l')
        map.drawcoastlines()
        map.fillcontinents(color='gray') #, zorder=1)
        #map.drawparallels(np.arange(-90.,120.,30.),labels=[1,0,0,0])
        #map.drawmeridians(np.arange(0.,420.,60.),labels=[0,0,0,1])

        return map

    def _onMotion(self, event):
        """
        Handles the motion event.

        Parameters:
        - event (MotionEvent): The matplotlib motion event.

        Returns:
        None
        """
        collisionFound = False
        if event.xdata != None and event.ydata != None: # mouse is inside the axes
            for i in range(len(self.X)):
                radius = 100000 # Collision radius
                if (abs(event.xdata - self.X[i]) < radius) and (abs(event.ydata - self.Y[i]) < radius):
                    inst_name = self.find_inst(self.ioda.instid[i], dict_inst)
                    top = tip='Lon=%f\nLat=%f\nInstrument: %s\nVar: %s' % (self.dataX[i], self.dataY[i], inst_name, self.ioda.varname)
                    self.tooltip.SetTip(tip)
                    self.tooltip.Enable(True)
                    self.i=i
                    collisionFound = True
                    break
        if not collisionFound:
            self.tooltip.Enable(False)

    def _onClick(self, event):
        """
        Handles the click event.

        Parameters:
        - event (MouseEvent): The matplotlib mouse event.

        Returns:
        None
        """
        # Left mouse click: Profile
        #--------------------------
        if event.button == 1:
            self.figure2 = plt.figure(num=self.fignum, figsize=(12, 12))
            self.axis2 = self.figure2.add_axes([0.3,0.69,0.4,0.3])
            map=self.draw_map()
            for shift in [0, 360]:
                x, y =map(self.dataX+shift,self.dataY)
                self.axis2.plot(x[:], y[:],
                                linestyle='None', marker='.', markersize=.1, alpha=0.1, label='myplot',color='b')
                self.axis2.plot(x[self.i], y[self.i],
                                linestyle='None', marker='.', markersize=10, label='myplot', color='k')

            # Identify instrument and variable
            inst_name = self.find_inst(self.ioda.instid[self.i], dict_inst)

            # Prepare axis
            self.axis3 = self.figure2.add_axes([0.1,0.05,0.8,0.6])
            self.axis3.set_ylabel('Depth [m]', fontweight='bold')

            # Get indices of observation pointed by mouth
            I=np.where( (self.ioda.lon==self.dataX[self.i]) & (self.ioda.lat==self.dataY[self.i]) )
            z=self.ioda.lev[I]
            time=self.ioda.time[I]
            fcst=self.ioda.obs[I]-self.ioda.omf[I]
            ana=self.ioda.obs[I]-self.ioda.oma[I]
            obsi=self.ioda.obs[I]
            obserrori=self.ioda.obserror[I]

            # Plot profile
            if self.ioda.varname=='waterTemperature':
               profile_legend = f'Insitu temperature {self.ioda.unit}'
            if self.ioda.varname=='salinity':
               profile_legend = f'Salinity {self.ioda.unit}'
            self.plot_prof(self.axis3, fcst, ana, obsi, z, profile_legend, sigo=obserrori)

            # Add obs info to the figure
            self.axis5 = self.figure2.add_axes([0.75,0.75,0.2,0.2],frameon=False)
            self.axis5.axis('off')
            strtxt = '{0:10} {1}'.format('Instrument: ', inst_name) + '\n' + \
                     '{0:5} {1:3.2f}'.format('Lon:', self.dataX[self.i]) + '\n' + \
                     '{0:5} {1:3.2f}'.format('Lat:', self.dataY[self.i]) + '\n'
            self.axis5.text(0.01,0.3,strtxt,fontsize=20, fontweight='bold')

            self.fignum +=1

            plt.show()

        # Middle mouse click: Regression plot for all instruments
        #--------------------------------------------------------
        if event.button == 2:
            # Isolate variable type
            for INSTID in tqdm(np.unique(self.ioda.instid)):
                # Identify instrument
                for instrument in dict_inst:
                    if INSTID==dict_inst[instrument].instid:
                        inst_name=dict_inst[instrument].name

                figure2 = plt.figure(num=self.fignum, figsize=(16, 12))

                axis2 = figure2.add_subplot(121)
                plt.suptitle(inst_name, fontweight='bold', fontsize=18)
                I = np.where( (self.ioda.instid==INSTID) &
                              (np.abs(self.ioda.omf)<6.0) &
                              (self.ioda.lev>-3000.0) & (self.ioda.lev<0.0) )
                yy = self.ioda.lev[I]
                xx = self.ioda.omf[I]
                from matplotlib.colors import LogNorm
                h = axis2.hist2d(xx, yy, bins=200, norm=LogNorm(), cmap='jet')
                axis2.set_xlim(-6, 6)
                axis2.grid(True)
                axis2.set_xlabel(f'omf {self.ioda.unit}',fontweight='bold', fontsize=18)
                axis2.set_ylabel('depth [m]',fontweight='bold', fontsize=18)

                axis3 = figure2.add_subplot(122)
                I = np.where(  (self.ioda.instid==INSTID) &
                               (np.abs(self.ioda.oma)<6.0) &
                               (self.ioda.lev>-3000.0) & (self.ioda.lev<0.0) )
                yy = self.ioda.lev[I]
                xx = self.ioda.oma[I]
                from matplotlib.colors import LogNorm
                h = axis3.hist2d(xx, yy, bins=200, norm=LogNorm(), cmap='jet')
                axis3.set_xlim(-6, 6)
                axis3.grid(True)
                axis3.set_xlabel(f'oma {self.ioda.unit}',fontweight='bold', fontsize=18)
                self.fignum+=1

            plt.show()

        # Right mouse click: Horizontal scatter plot of omf's and oma's for surface
        #                    Vertical scatter for profiles
        #--------------------------------------------------------------------------
        if event.button == 3:
            # Isolate var type
            for INSTID in tqdm(np.unique(self.ioda.instid)):
                # Identify instrument
                for instrument in dict_inst:
                    if INSTID==dict_inst[instrument].instid:
                        inst_name=dict_inst[instrument].name
                        allproj=dict_inst[instrument].proj

                for proj in allproj:
                    figure2 = plt.figure(num=self.fignum, figsize=(16, 12))

                    I=np.where(self.ioda.instid==INSTID )
                    I=np.where( np.logical_and( (self.ioda.instid==INSTID), (self.ioda.lev<10) ) )
                    STD=np.std(self.ioda.omf[I])

                    axis2 = figure2.add_subplot(211)
                    map=self.draw_map(proj=proj)
                    for shift in [0, 360]:
                        x, y =map(self.dataX[I]+shift,self.dataY[I])
                        axis2.scatter(x, y, 5, c=self.ioda.omf[I], cmap=cm.bwr,vmin=-2*STD,vmax=2*STD,edgecolor=None,lw=0)
                    titlestr=inst_name+' OMF'
                    plt.title(titlestr,fontsize=24,fontweight='bold')

                    axis3 = figure2.add_subplot(212)
                    map=self.draw_map(proj=proj)
                    for shift in [0, 360]:
                        x, y =map(self.dataX[I]+shift,self.dataY[I])
                        axis3.scatter(x, y, 5, c=self.ioda.oma[I], cmap=cm.bwr,vmin=-2*STD,vmax=2*STD,edgecolor=None,lw=0)
                    titlestr=inst_name+' OMA'
                    plt.title(titlestr,fontsize=24,fontweight='bold')
                    self.fignum+=1

                    ax4 = figure2.add_axes([0.15, 0.25, 0.025, 0.5])
                    norm = mpl.colors.Normalize(vmin=-.5*STD,vmax=.5*STD)
                    mpl.colorbar.ColorbarBase(ax4, cmap=cm.bwr,norm=norm,orientation='vertical',extend='both')
            plt.show()

if __name__ == '__main__':
    description = """Observation space interactive map:
                     oceanview.py -i prof.out_*.nc adt.out_*.nc sst.out_*.nc"""

    parser = ArgumentParser(
        description=description,
        formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument('-i', '--input', help="ioda files from the output of soca DA", type=str, nargs='+', required=True)
    parser.add_argument('-v', '--variable', help="waterTemperature or salinity", type=str, required=True)

    print("""
             ============================================
             === Mouse left click: Profiles
             === Mouse middle click: regression
             === Mouse right click: Horizontal omf's/oma's
             === Usage: oceanview.py -i prof.out_*.nc adt.out_*.nc sst.out_*.nc
             ============================================
          """)
    args = parser.parse_args()
    listoffiles = args.input
    example=observation_space(listoffiles, args.variable)
    plt.show()
